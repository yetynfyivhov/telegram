{"version":3,"file":"5769.1224fddf9495e2065636.js","mappings":"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QuB,GACjE6gG,gCACAC,oCACAkB,cAAe9tF,QAAQ+C,GAAcgrF,cACrCC,oBAAoBx6D,EAAAA,EAAAA,KAA+BjpC,EAAQ,kBAC3Du/F,eACArR,eACAwV,kBAAmBvQ,IAAmBhiE,gBACjC0tE,GAAe8E,gBAAkBxQ,IAAmBrM,iBACpD+X,GAAe+E,mBAAqBzQ,IAAmBvM,gBAC5Did,mBAAoB7jG,EAAO4uB,SAAS6Q,MAAMokE,sBACtC9gG,GAAc,CAAEiwF,gBAAgB8Q,EAAAA,EAAAA,KAAqB9jG,EAAQgB,EAA6B,cAApBmY,OAC5C,iBAAnBqqE,IAA+B,CAAEA,sBACxCwd,IAAa,CACfE,kBACAC,oBACA32F,uBACA42F,iBAEH,GA5Le5zC,EA3nCuBu2C,EACzC/iG,UACAgjG,+BACA5jB,gCACAwc,gCACAxxB,QACA4K,YACA+oB,aACAD,iBACAmF,aACA5Q,YACA6Q,kBACAC,cACAlF,iBACAn4E,YACAs9E,gBACAC,yBACArF,wBACAmE,iBACAC,kBACAkB,eACAxpE,QACA2kE,kBACA1sD,SACA4sD,gBACAC,eACAtjE,YACAwjE,cACAK,kBACAnqF,eACAqqF,qBACAG,4BACAC,mBACAI,aACAH,iBACAI,cACA9N,iBACAxP,iBACAn7C,oBACAq7D,oBACAzmB,cACAylB,kBACA1B,YACAE,iBACAE,eACAD,mBACA32F,uBACAg1F,gBACA1tB,kBACAqtB,iBACA/1B,aACAl/B,WACA8yC,YACAqkB,aACAG,iBACAC,uBACAe,sBACAe,iBACAxmB,kBACA3N,cACAwzB,mBACA58F,YACA67F,mBACAp6D,sBACAiC,mBACAz+B,2BACAkO,mBACA2pF,gBACAp2F,YACAs3E,iBACA6D,oBACAkb,oBACAE,sBACAD,yBACA7P,qBACA2O,qBACAyC,wBACA1E,qBACAmC,gBACAD,gBACAG,oBACAI,0BACAe,4BACAjB,gCACAC,oCACAoB,sBACAlE,gBACArR,eACA7Q,yBACAwmB,sBACAW,kCAEA,MAAM,uBACJjuD,GAAsB,qBACtBuxC,GAAoB,uBACpBrxC,GAAsB,sBACtBguD,GAAqB,iBACr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yG,qBACAzgH,cACAif,iBACAS,gBACAnM,aACAa,gBACAosG,yBACA7gH,SAAUlyB,EAAOkyB,SACjB8rB,qBACD,GA5GewP,EAxaoB+U,EACtC9J,WACAy6E,mBACAC,qBACAC,oBACAC,oBACAE,oBACAE,qBACAI,mBACAC,aACA7wB,eACAj7D,oBACAhN,mBACA+4F,mBACAC,eACAC,wBACAnmF,8BACA8mF,eACAnxH,4BACAm4B,0BACAs4F,qBACA9pB,0BACA3iG,WACAorH,2BACA9tH,cACAqvH,sBACAD,oBACAE,mBACAC,0BACAn5F,aACAq2F,YACA+C,2BACAl3G,kBACAm3G,qBACAC,qBACAr1G,2BACAoS,iBACAhU,SACAk3G,kBACAp8G,UACAq8G,qBACA/zG,qBACAi0G,qBACAlB,uBACA72H,uBACAk2H,qBACAzgH,cACA0f,gBACAtL,gBACAb,aACAitG,yBACA7gH,YACA8rB,0BAEA,MAAM,SACJ82F,GAAQ,mBACRC,GAAkB,yBAClBC,GAAwB,2BACxBC,GAA0B,eAC1B92F,GAAc,iBACd+2F,GAAgB,kBAChBC,GAAiB,kBACjBC,GAAiB,gBACjBC,GAAe,uBACfC,GAAsB,gBACtBpuF,GAAe,iBACfquF,GAAgB,sBAChBC,GAAqB,kBACrBC,GAAiB,qBACjB7uF,GAAoB,uBACpB8uF,GAAsB,iBACtBC,GAAgB,qBAChBC,GAAoB,qBACpBC,GAAoB,yBACpBC,GAAwB,WACxBnsG,GAAU,cACVosG,GAAa,eACbx3G,GAAc,gBACdy3G,GAAe,iBACfpxH,GAAgB,wBAChBqxH,GAAuB,kBACvBC,GAAiB,aACjBC,GAAY,gBACZC,GAAe,WACft1H,GAAU,iBACV+jG,GAAgB,wBAChB/9D,GAAuB,gBACvBlW,GAAe,iBACfylG,GAAgB,oBAChBxvF,GAAmB,0BACnByvF,GAAyB,6BACzBC,GAA4B,uBAC5BC,GAAsB,mBACtB7vF,GAAkB,eAClB8vF,KACEz0H,EAAAA,EAAAA,MAEAoN,EAAAA,MAAUwjH,KACZA,IAAiB,EAEjBvjH,QAAQC,IAAI,qBAIdwpC,EAAAA,GAAAA,IAAW,MA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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/api/ton.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: threadId });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? {};\n\n  if (threadInfo && threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<number>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiVideo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, partition, split, unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isChatChannel,\n  isDeletedUser,\n  isLocalMessageId,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const draftReplyInfo = !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    userId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n          wasDrafted: Boolean(draft),\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: translate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: number; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (isDeepLink(urlWithProtocol)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    });\n\n    global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountChats, accountUsers, globalChats, globalUsers,\n      } = result;\n\n      if (accountChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...accountChats, ...globalChats], 'id'));\n      }\n\n      if (accountUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...accountUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: accountChats.map(({ id }) => id),\n          userIds: accountChats.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ApiChat } from '../../../api/types';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    threadId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          currentChat,\n          activeThreadId,\n          activeThreadId !== MAIN_THREAD_ID ? activeThreadId : undefined,\n        ),\n        activeThreadId !== MAIN_THREAD_ID ? callApi('fetchDiscussionMessage', {\n          chat: currentChat,\n          messageId: activeThreadId,\n        }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (resultDiscussion) {\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          resultDiscussion.threadInfoUpdates.forEach((update) => {\n            global = updateThreadInfo(global, currentChatId, activeThreadId, update);\n          });\n        }\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, offsetId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: offsetId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { accountUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (accountUsers.length) {\n      global = addUsers(global, buildCollectionByKey(accountUsers, 'id'));\n      localUserIds = accountUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChats, addUsers, removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot, selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectDraft,\n  selectIsTrustedBot, selectMessageReplyInfo, selectSendAs, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError, isChatChannel } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: String(month.amount),\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatChannel(chat)) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostsListResult, boostStatusResult] = await Promise.all([\n    callApi('fetchBoostsList', { chat }),\n    callApi('fetchBoostsStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostsListResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = addUsers(global, buildCollectionByKey(boostsListResult.users, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      boosters: boostsListResult.boosters,\n      boosterIds: boostsListResult.boosterIds,\n      count: boostsListResult.count,\n      nextOffset: boostsListResult.nextOffset,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      boosters: {\n        ...tabState.boostStatistics.boosters,\n        ...result.boosters,\n      },\n      boosterIds: unique([...tabState.boostStatistics.boosterIds || [], ...result.boosterIds]),\n      count: result.count,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  let tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n\n  const newStatusResult = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!newStatusResult) {\n    return;\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal?.boostStatus) return;\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      boostStatus: newStatusResult,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getMessageKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiStoryView } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerPinnedStory,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isPinned } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isPinned });\n  global = updatePeerPinnedStory(global, peerId, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { peer, storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isPinned: currentIsPinned });\n    global = updatePeerPinnedStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerPinnedStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isPreload = 'isPreload' in payload;\n  const {\n    offset, areReactionsFirst, areJustContacts, query, limit,\n  } = isPreload ? {\n    offset: undefined,\n    areReactionsFirst: undefined,\n    areJustContacts: undefined,\n    query: undefined,\n    limit: PREVIEW_AVATAR_COUNT,\n  } : payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (!isPreload) {\n    global = updateStoryViewsLoading(global, true, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (!isPreload) global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n\n  if (isPreload && result.views?.length) {\n    const recentViewerIds = result.views\n      .filter((view): view is ApiStoryView => 'date' in view)\n      .map((view) => view.peerId);\n    global = updatePeerStoryViews(global, peerId, storyId, {\n      recentViewerIds,\n      viewsCount: result.viewsCount,\n      reactionsCount: result.reactionsCount,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { GlobalState } from '../../types';\n\nimport { TON_MSG_ADDRESS_REQUEST, TON_MSG_ADDRESS_RESPONSE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, getGlobal, setGlobal } from '../..';\nimport { getMessageText } from '../../helpers';\nimport { selectChatMessages, selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('requestTonAddress', (global, actions, payload): void => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const wasRequested = Object.values(selectChatMessages(global, chatId)).some((message) => {\n    return message.isOutgoing && getMessageText(message) === TON_MSG_ADDRESS_REQUEST;\n  });\n  if (wasRequested) {\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  actions.sendMessage({\n    messageList: currentMessageList!,\n    text: TON_MSG_ADDRESS_REQUEST,\n    tabId,\n  });\n});\n\naddActionHandler('shareTonAddress', (global, actions, payload): void => {\n  const { ton } = window as any;\n  if (!ton) {\n    return;\n  }\n\n  const { requesterId, requestedAt, tabId = getCurrentTabId() } = payload;\n\n  const { lastAddressShareAt } = global.ton.byChatId[requesterId] || {};\n  if (lastAddressShareAt && lastAddressShareAt >= requestedAt) {\n    return;\n  }\n\n  (async () => {\n    const addresses = await ton.send('ton_requestAccounts');\n\n    global = getGlobal();\n\n    const { chatId } = selectCurrentMessageList(global, tabId) || {};\n    if (chatId !== requesterId) {\n      return;\n    }\n\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    actions.sendMessage({\n      messageList: currentMessageList!,\n      text: `${TON_MSG_ADDRESS_RESPONSE}${addresses[0]}`,\n      tabId,\n    });\n\n    global = {\n      ...global,\n      ton: {\n        ...global.ton,\n        byChatId: {\n          ...global.ton.byChatId,\n          [requesterId]: {\n            ...global.ton.byChatId[requesterId],\n            lastAddressShareAt: Date.now(),\n          },\n        },\n      },\n    };\n\n    setGlobal(global);\n  })();\n});\n\naddActionHandler('saveTonAddress', (global, actions, payload): GlobalState | void => {\n  const { chatId, address } = payload;\n\n  const { address: currentAddress } = global.ton.byChatId[chatId] || {};\n\n  if (currentAddress === address) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    ton: {\n      ...global.ton,\n      byChatId: {\n        ...global.ton.byChatId,\n        [chatId]: {\n          ...global.ton.byChatId[chatId],\n          address,\n        },\n      },\n    },\n  };\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({ replyToMsgId: messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { selectIsCurrentUserPremium, selectUser, selectUserFullInfo } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments || (message.content.text && !currentAlbum.mainMessage.hasComments)) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.senderUserId !== nextMessage.forwardInfo?.senderUserId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getPeerIdDividend } from '../../global/helpers';\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getPeerIdDividend(userId) + getPeerIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\",\"image\":\"ZAL3vluMFRM8wd30wuzL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useDevicePixelRatio from '../../hooks/window/useDevicePixelRatio';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n  const dpr = useDevicePixelRatio();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / dpr,\n    height: botInfoDimensions.height / dpr,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.image}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SP9ygrz63JLi4xNqwoVE\",\"title\":\"Sw5A_K0ZxEX96Ui9lFCb\",\"sticker\":\"pukATZ25wuRwIprQiql9\",\"resultSticker\":\"H2SUn_dQhJ_DlaoIRrLs\",\"count\":\"SgtGraFRcPrLtRnxw3gt\",\"section\":\"phMVInVgl42PoTFQfGqI\",\"description\":\"Vb0eOjCRZWXBFSaUyvx2\",\"peers\":\"amBRnJ97D6pMr6DVxU_m\",\"peer\":\"uJ9T4Pwgeb_rBIAXBpse\",\"button\":\"NFt5nDqi5BykWcvrsjtU\",\"result\":\"N2jtQkeZxTtGOaLu2wBy\",\"separator\":\"_fU0EBXwmoeXiyoCMPCg\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isApiPeerChat, isOwnMessage,\n} from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <div className={styles.separator}>{lang('BoostingGiveawayMsgWithDivider')}</div>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIcon\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiReactionCount,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageKey, isReactionChosen, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../ui/Button';\n\nimport './Reactions.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  withRecentReactors?: boolean;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  withRecentReactors,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as ApiPeer[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen', 'message-reaction')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className=\"reaction-animated-emoji\"\n        containerId={getMessageKey(message)}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport safePlay from '../../../util/safePlay';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\n\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useSignal from '../../../hooks/useSignal';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageKey,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/Icon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n  const hasText = hasMessageText(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasText ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { userId: storyReplyUserId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location?.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyUserId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded, Boolean(focusedQuote),\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            backgroundEmojiId={sender?.color?.backgroundEmojiId}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { userId: storyReplyUserId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage) : forwardHeader && !isRepliesChat\n      ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyUserId\n      ? selectPeerStory(global, storyReplyUserId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyUserId ? selectUser(global, storyReplyUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer, quote: focusedQuote,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.mainMessage.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId,\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\n\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { MouseEvent as ReactMouseEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiSponsoredMessage, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  peer?: ApiChat;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  peer,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    requestAppWebView,\n    startBot,\n    focusMessage,\n    openUrl,\n    openPremiumModal,\n    clickSponsoredMessage,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n  const withAvatar = Boolean(message?.isAvatarShown && peer);\n  const isBotApp = Boolean(message?.botApp);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!peer) {\n      return;\n    }\n\n    openChat({ id: peer.id });\n  });\n\n  const handleLinkClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.webPage!.url, shouldSkipModal: true });\n\n    return false;\n  });\n\n  const handleCloseSponsoredMessage = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n\n    if (isBotApp) {\n      const { shortName } = message.botApp!;\n      const theme = extractCurrentThemeParams();\n\n      requestAppWebView({\n        botId: message.chatId!,\n        appName: shortName,\n        startApp: message.startParam,\n        theme,\n      });\n    } else if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderAvatar() {\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={peer}\n        onClick={peer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderPhoto() {\n    if (message?.botApp) {\n      if (!message.botApp.photo) return undefined;\n\n      return (\n        <Avatar\n          size=\"large\"\n          peer={bot}\n          photo={message.botApp.photo}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    if (channel) {\n      return (\n        <Avatar\n          size=\"large\"\n          peer={channel}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderContent() {\n    if (message?.webPage) {\n      return (\n        <>\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <div className=\"message-title message-peer\" dir=\"ltr\">\n              {renderText(message.webPage.siteName)}\n            </div>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message!.text.text,\n                entities: message!.text.entities,\n              })}\n            </span>\n          </div>\n\n          <Button\n            className=\"SponsoredMessage__button\"\n            size=\"tiny\"\n            color=\"translucent\"\n            isRectangular\n            onClick={handleLinkClick}\n          >\n            <i className=\"icon icon-arrow-right\" aria-hidden />\n            {lang('OpenLink')}\n          </Button>\n        </>\n      );\n    }\n\n    const buttonText = message?.buttonText ?? (\n      isBotApp\n        ? lang('BotWebAppInstantViewOpen')\n        : (message!.isBot\n          ? lang('Conversation.ViewBot')\n          : lang(message!.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel')\n        ));\n    const title = isBotApp\n      ? message!.botApp!.title\n      : (bot\n        ? renderText(getUserFullName(bot) || '')\n        : (channel ? renderText(message!.chatInviteTitle || getChatTitle(lang, channel) || '') : '')\n      );\n\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  const contentClassName = buildClassName(\n    'message-content has-shadow has-solid-background has-appendix',\n    getPeerColorClass(bot || peer || channel),\n  );\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className={buildClassName('SponsoredMessage Message open', withAvatar && 'with-avatar')}\n    >\n      {withAvatar && renderAvatar()}\n      <div\n        className={contentClassName}\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <div className=\"content-inner\" dir=\"auto\">\n          {renderPhoto()}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n          </span>\n          {renderContent()}\n        </div>\n        <MessageAppendix />\n        <Button\n          className=\"message-action-button\"\n          color=\"translucent-white\"\n          round\n          size=\"tiny\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseSponsoredMessage}\n        >\n          <i className=\"icon icon-close\" aria-hidden />\n        </Button>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const peer = message?.chatId ? selectChat(global, message?.chatId) : undefined;\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      peer,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getMessageHtmlId,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isLocalMessageId,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isSynced, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? threadId : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions?.results.length);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadId && messagesById[threadId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getMessageKey,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = threadId;\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActions(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isMessageThread);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? threadId : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"draggable\":\"kIdhoMn_mbGnJc1YZpIK\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(\n          tabType === 'members'\n            ? ProfileState.MemberList\n            : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia),\n        );\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ox1yTGx4NBVANs7q4Ste\",\"wrapper\":\"g34egFNlUSZiOR5Y9K9A\",\"media\":\"gyVqf8gGVz_cu2HCjifT\",\"expiredIcon\":\"eg5740UDe7iAc7dGlyex\",\"contextMenu\":\"rhvyma7da0HVZh3rYFnr\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerPinnedStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    fetchChannelRecommendations,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasStoriesTab ? [{ type: 'stories', title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && currentUserId === chatId ? [{ type: 'storiesArchive', title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels', title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    chatId,\n    currentUserId,\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasStoriesTab,\n    isChannel,\n    topicId,\n    similarChannels,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  useEffect(() => {\n    if (isChannel) {\n      fetchChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerPinnedStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n    storyIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const similarChannels = selectSimilarChannelIds(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories));\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels,\n      isCurrentUserPremium,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3>{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3>{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3>{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.StoryList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || contentKey === HeaderContent.StoryStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZtWHQyTLrCmeNE53Hvd9\",\"noResults\":\"cuYFx3gorhlWaUcBJ0Aj\",\"section-header\":\"IPPwOeRGhyQDYbJsBsdb\",\"sectionHeader\":\"IPPwOeRGhyQDYbJsBsdb\",\"section\":\"HMySq6RoeqoKdRuUAW7z\",\"user\":\"hben8jCvRhcyebFweulH\",\"stats\":\"dBHHnaU4CZ9TELAykZyA\",\"down\":\"nlFBjRF9YGIjCHGrt2cp\",\"loadMoreSpinner\":\"QBMARpR7dewZog5QmOkh\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoostStatistics } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dateFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n}: StateProps) => {\n  const { openChat, loadMoreBoosters, closeBoostStatistics } = getActions();\n  const lang = useLang();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics?.count) return undefined;\n    const loadedCount = boostStatistics.boosterIds?.length || 0;\n    const totalCount = boostStatistics.count;\n    return totalCount - loadedCount;\n  }, [boostStatistics]);\n\n  const handleBoosterClick = useLastCallback((userId: string) => {\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreBoosters();\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={boosts.toString()}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          <div className={styles.section}>\n            <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('Boosters')}\n            </h4>\n            {!boostStatistics.boosterIds?.length && (\n              <div className={styles.noResults}>{lang('NoBoostersHint')}</div>\n            )}\n            {boostStatistics.boosterIds?.map((userId) => (\n              <ListItem\n                key={userId}\n                className=\"chat-item-clickable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleBoosterClick(userId)}\n              >\n                <PrivateChatInfo\n                  className={styles.user}\n                  forceShowSelf\n                  userId={userId}\n                  status={lang('BoostExpireOn', formatDateAtTime(lang, boostStatistics.boosters![userId] * 1000))}\n                />\n              </ListItem>\n            ))}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount)}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n\n    return {\n      boostStatistics,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  selectAreActiveChatsLoaded, selectChat, selectCurrentMessageList, selectRightColumnContentKey, selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat } from '../../global/selectors';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { userIds, chatId } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !(userIds && chatId));\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useTimeout from '../../hooks/useTimeout';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from '../modals/boost/BoostModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport GiftCodeModal from '../modals/giftcode/GiftCodeModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport InviteViaLinkModal from './InviteViaLinkModal.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  boostModal?: TabState['boostModal'];\n  giftCodeModal?: TabState['giftCodeModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  inviteViaLinkModal?: TabState['inviteViaLinkModal'];\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  giftCodeModal,\n  boostModal,\n  noRightColumnAnimation,\n  isSynced,\n  inviteViaLinkModal,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadPremiumSetStickers,\n    loadAuthorizations,\n    loadPeerColors,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <BoostModal info={boostModal} />\n      <GiftCodeModal modal={giftCodeModal} />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <InviteViaLinkModal userIds={inviteViaLinkModal?.restrictedUserIds} chatId={inviteViaLinkModal?.chatId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      inviteViaLinkModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      inviteViaLinkModal,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","tabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","clearMessageTranslation","topics","deleteTopic","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","map","Number","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","limit","users","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","set","IS_IOS","rafPromise","delete","payload","shouldForceRender","onError","isRestricted","viewportIds","isLocalMessageId","Boolean","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","draftReplyInfo","userId","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userFullName","getUserFullName","showNotification","translate","join","messageListType","selectEditingMessage","setEditingId","getMessageOriginalId","cancelApiProgress","apiUpdate","currentDraft","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","isUnread","minId","readCount","count","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","isDeepLink","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","selectForwardsCanBeSentToChat","isModalShown","openThread","closeMediaViewer","exitMessageSelectMode","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","Array","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","messageLink","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","link","tryParseDeepLink","localChat","selectChatByUsername","getChatGroupOrChannelMessage","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","isChatGroup","localMessage","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","accountChats","accountUsers","globalChats","globalUsers","localResults","chatIds","globalResults","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","activeThreadId","currentChat","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","pick","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","botFatherId","gameePopups","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","Checkout","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","attachMenu","bots","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","isFromConfirm","shouldDisplayDisclaimer","isDisclaimerNeeded","requestedAttachBotInstall","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","closeReactionPicker","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","String","amount","field","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostsListResult","boostStatusResult","boosters","boosterIds","isLoadingBoosters","slots","newStatusResult","giftCodeModal","info","requestConfetti","closeGiftCodeModal","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","messageKey","getMessageKey","selectPerformanceSettingsValue","stopActiveReaction","containerId","startActiveReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","dcId","statisticsDcId","stats","updateStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerPinnedStory","lastReadStoryId","storyIds","isPreload","areReactionsFirst","areJustContacts","PREVIEW_AVATAR_COUNT","updateStoryViewsLoading","updateStoryViews","recentViewerIds","view","updatePeerStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","TON_MSG_ADDRESS_REQUEST","ton","requesterId","requestedAt","lastAddressShareAt","addresses","send","TON_MSG_ADDRESS_RESPONSE","address","currentAddress","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentMessageId","currentStoryId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","storyList","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","areStoriesHidden","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","key","rules","setConfirmPaymentUrl","ConfirmPayment","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","size","animationLevel","attachBots","selectTheme","canInstall","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","isForSideMenu","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","FloatingActionButtons","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","mainMessage","albumId","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","inlineButtons","senderUserId","dividend","getPeerIdDividend","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","containerRef","handleStickerSelect","StickerView","chatBot","isLoadingBotInfo","chatBotFullInfo","MessageListBotInfo","isInMessageList","dpr","useDevicePixelRatio","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","EmbeddedStory","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","Album","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","AnimatedCustomEmoji","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","AnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","CommentButton","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","Game","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","canPlayAnimatedEmojis","Giveaway","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","untilDate","prizeDescription","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","DisplayNames","countries","countryCode","isoToEmoji","of","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIcon","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","InlineButtons","RE_TME_LINK","renderIcon","Invoice","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","InvoiceMediaPreview","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","cx","cy","d","Location","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","MessageMeta","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","Poll","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","isText","REACTION_SIZE","ReactionButton","withRecentReactors","recentReactors","recentReaction","isReactionChosen","ReactionAnimatedEmoji","AvatarList","Reactions","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","RoundVideo","playerRef","circleRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","downloadProgress","isPlayerReady","markPlayerReady","noThumb","getMessageMediaThumbDataUri","thumbRef","thumbClassNames","useMediaTransition","isTransferring","wasLoadDisabled","shouldSpinnerRender","spinnerClassNames","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","currentTime","shouldPlay","stopPlaying","capturePlaying","isAllowed","paused","stopCurrentAudio","handleTimeUpdate","onEnded","onTimeUpdate","onReady","ProgressSpinner","Sticker","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","isLowPriority","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","selectIsChatWithSelf","isRepliesChat","isChatWithRepliesBot","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyToPeerId","replyFrom","storyReplyUserId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasText","hasMessageText","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","replyToTopId","isQuote","quoteText","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasActionButton","isGeoLiveActive","peerColorClass","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","requestForcedReflow","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","renderSenderName","senderEmojiStatus","senderIsPremium","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","EmbeddedMessage","senderChat","forwardSender","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","DotAnimation","WebPage","backgroundEmojiId","onCancelMediaTransfer","MessageAppendix","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","SponsoredMessage","viewSponsoredMessage","openChatByInvite","requestAppWebView","clickSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","isAvatarShown","isBotApp","handleLinkClick","handleCloseSponsoredMessage","chatInviteHash","renderPhoto","isRecommended","siteName","isRectangular","chatInviteTitle","onAboutAds","MessageListContent","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","MessageList","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","backgroundColor","MessageSelectToolbar","ChatReportPanel","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","HeaderPinnedMessage","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","MiddleHeader","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderActions","canExpandActions","MobileSearch","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","onUnpin","teactOrderKey","AttachBotInstallModal","BoostModal","ChatlistModal","modal","GiftCodeModal","MapModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadPeerSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","isOut","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","MediaAreaOverlay","TABS","mediaSearchType","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannels","selectSimilarChannelIds","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","storyByIds","archiveStoryIds","archiveIds","limitSimilarChannels","commonChatIds","Profile","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadPeerPinnedStories","loadStoriesArchive","fetchChannelRecommendations","deletingUserId","setDeletingUserId","initialTab","setActiveTab","renderingActiveTab","tabType","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","ProfileState","MemberList","StoryList","SharedMedia","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","RightSearch","loadMoreBoosters","closeBoostStatistics","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","statsOverview","level","premiumSubscribers","boostersToLoadCount","loadedCount","handleBoosterClick","section","PremiumProgress","leftText","rightText","floatingBadgeText","floatingBadgeIcon","StatisticsOverview","sectionHeader","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","prevConfettiTime","hideTimeout","DeleteFolderDialog","DialogsAsync","Dialogs","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","DownloadUrl","baseURI","filename","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","InviteViaLinkModal","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPremiumSetStickers","loadPeerColors","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","stickerSetShortName","UnreadCount","restrictedUserIds","passcodeSettings","LockScreen","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}